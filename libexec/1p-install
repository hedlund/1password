#!/usr/bin/env bash
# Usage: 1p install [version]
# Summary: Install the 1Password binary and all dependencies
# Help: Simply run `1p install` to download the 1Password binary and install 
# any missing dependencies. On Mac, this requires Homebrew installed, and 
# on Linux we're only using apt-get for now.

set -e

BIN_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )/../bin" && pwd )
DEFAULT_VERSION="0.1.0"

function usage() {
    echo "USAGE: 1p install [version]"
    echo
    echo "Check if the 1Password binary has been downloaded, otherwise it will"
    echo "attempt to fetch the latest version of it. The specific version to"
    echo "download can be specified as an optional parameter. All relevant"
    echo "dependencies will also be installed, so it may as for your password,"
    echo "as it used sudo."
    echo
    echo "    1p install"
    echo "    1p install 1.0.0"
    echo
}

# Parse parameters
while test $# -gt 0; do
    case "$1" in
        --help)
            usage
            exit 0
            ;;
        
        --complete)
            exit 0
            ;;

        *)
            version=$1
            ;;
    esac
    shift
done

# Check if a command exists
function exists() {
    command -v "$1" >/dev/null 2>&1
}

# Install a command
function install() {
    if [[ $OSTYPE =~ darwin* ]]; then
        brew install $1
    else
        sudo apt-get install $1
    fi
}

# Make sure the commands exists, install them otherwise
function ensure() {
    for command in "$@"; do
        if ! exists $command; then
            install $command
        fi
    done
}

# Output the platform we should download for. Lots of room for improvement.. ;-)
function platform() {
    if [[ $OSTYPE =~ darwin* ]]; then
        echo "darwin_amd64"
    else
        echo "linux_amd64"
    fi
}

# Try to fetch the latest released version from the Agilebits release page
function version() {
    if [ ! -z $version ]; then
        echo $version
    else
        # Probably a way unnecessarily complex way of extracting the latest version
        local latest=$( curl -s https://app-updates.agilebits.com/product_history/CLI | sed -n '\|<h3>|{:n;\|<span|!{N;bn};y|\n| |;p}' | sed 's| | |g;1q' | sed -e 's/.*>\(.*\)<.*/\1/g' | tr -d '[:space:]' )
        if [ ! -z $latest ]; then
            echo $latest
        else
            echo $DEFAULT_VERSION
        fi
    fi
}

echo "Checking (and installing) the necessary dependencies..."
ensure curl unzip gpg jq
if [[ $OSTYPE =~ linux* ]]; then
    ensure xsel
fi

# Check if we need to download the 1Password binary
if [ ! -f "$BIN_DIR/op" ]; then
    curl -s https://keybase.io/1password/pgp_keys.asc | gpg --import >/dev/null 2>&1
    VERSION=$( version )
    DOWNLOAD_URL="https://cache.agilebits.com/dist/1P/op/pkg/v$VERSION/op_$( platform )_v$VERSION.zip"
    echo "Downloading $DOWNLOAD_URL"
    curl -sS -o $BIN_DIR/op.zip $DOWNLOAD_URL
    unzip -q -o $BIN_DIR/op.zip -d $BIN_DIR
    if ( ! gpg --verify $BIN_DIR/op.sig $BIN_DIR/op >/dev/null 2>&1 ); then
        echo "ERROR: Could not verify the code signature of the downloaded binary!"
        rm $BIN_DIR/op*
        exit 1
    fi
    rm $BIN_DIR/op.*
else
    echo "1Password binary already in place..."
fi
